##################################
# SSL default host configuration #
##################################

# This configuration acts as a default server for https connections. It means
# that when a host that doesn't have https turned on is accessed using https
# the request will end up here. It's not possible to just drop the connection
# because the SSL handshake happens before anything else can be done and the
# handshake will need a certificate file.
#
# Without a default server for https nginx would select the first host that
# has https enabled. This is a problem as we don't want client A's site to show
# a certificate warning and client B's site if accessed through https.
#
# The best solution to this problem is to have a default https host that does
# nothing else but shows a simple html error page. With this configuration
# a client accessing a site that doesn't have https enabled with https will
# see a certificate warning and then the error page hosted at this default
# domain.
#
# Remember to create the index.html page in the root of the default domain that
# acts as the error page and ensure the certificate file exists before using this
# configuration.
#
# PS: This whole problems only exists if you're hosting multiple http and https
# sites on one server using virtual hosts and all hosts don't have https enabled.

server {
  # Listen normally on the port 80. This allows f.ex. letsencypt to negotiate
  # a certificate for the default fully qualified domain name automatically.
  listen 80;
  
  # Uncomment these after you have created the certificates via letsencrypt
  # listen 443 default_server ssl;
  # ssl_certificate /etc/letsencrypt/live/EXAMPLE.COM/fullchain.pem;
  # ssl_certificate_key /etc/letsencrypt/live/EXAMPLE.COM/privkey.pem;

  # The host name to respond to
  server_name EXAMPLE.COM;

  # Path for static files
  root /srv/www/EXAMPLE.COM/public;

  # Index files
  index index.html;

  # Redirect everything to the index.html.
  location / {
    try_files /index.html $uri;
  }
}
